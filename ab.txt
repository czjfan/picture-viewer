先进行了几步优化
0.alphablend用存取数组方式
0.5条件alpablend（即源alpha值=255时则不alphablend）
1.一位数组改2维
2.颜色DWORD不用移位相加，改用byte指针，按通道分开处理
3.高速缓存，减少随机读取alphablend数组
4.不用内联，而是直接写入代码
5。round函数也不用内联
6.

以下尝试是优化后的回退测试，如果失败则说明优化成功。

1.先获得byte指针，if判断用指针代替移位：失败。4.7/4.1（外加测试）
2.目标色不获得byte指针，用移位相加：失败4.2/4.1
3.高速缓存.前后像素不一样，成功！12/21。全部透明像素一样，失败11/4.1
4.一维数组：略失败，4.1少/4.1多
5.用内联，不直接写入代码:失败。50/4.1
6.round函数不用内联4.10/4.14。成功

其他优化
1省略一次性中间变量
2去掉多余逻辑
3memcpy代替连续地址赋值
4增加减少重复运算的中间变量



对比：
1.RECT的4个变量单独赋值比整体赋值{0,0,0,0}要快。 1.3:1.8
2.POINT 也是单独赋值更快			1.1:1.4
3.RECT POINT初始化时整体赋值和单独赋值差不多
4.多个变量或结构体中多变量单独赋值比连续赋值要快	1.3:1.4
5.单独赋值，多个变量比结构体中的多变量略快，%级别
6.相或取非判断比相与慢
7.min中包含常数和变量时，max前变量快			1.3:1.4
8.
9.TODO:？：三目运算符与ifelse，考虑前后变量